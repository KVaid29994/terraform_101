üß© What are variables in Terraform?

Variables in Terraform act like parameters that you pass into your configuration. They allow you to:
- Reuse code across environments (e.g., dev, staging, prod)
- Avoid duplication by centralizing values
- Customize behavior without changing the source code
- Improve security by hiding sensitive values


===========================================================================

üõ†Ô∏è How to define a variable
You use the variable block in your .tf files

variable "region" {
  description = "The AWS region to deploy resources"
  type        = string
  default     = "us-west-2"
}

You can then use it like this:

provider "aws" {
  region = var.region
}

===========================================================================

üì¶ Ways to set variable values
Terraform supports multiple ways to assign values to variables:
- Default values (inside the variable block)
- Command line flags (-var="region=us-east-1")
- Environment variables (TF_VAR_region=us-east-1)
- Variable definition files (terraform.tfvars)
- Terraform Cloud workspaces

===========================================================================

Terraform variable attribute:

- type: Defines the kind of data (e.g., string, number, bool, list, map).
- description: Explains what the variable is used for.
- default: Sets a fallback value if none is provided.
- validation: Adds rules to check if the input is acceptable.
        - condition and error_message to be defined
- sensitive: Hides the value from CLI output to protect secrets.

===================================================================
In Terraform, an object is a complex variable type that lets you group multiple named attributes‚Äîeach with its own type‚Äîinto a single structured value. It‚Äôs like a mini-record or dictionary with a fixed schema

===================================================================

üó∫Ô∏è Terraform map Variable 
- type: map holds key-value pairs where all values share the same type.
- description: Used to group related values under named keys (like tags or settings).
- default: Can be set with { key1 = "value1", key2 = "value2" }.
- access: Use var.map_name["key"] to retrieve a specific value.
- use case: Ideal for tags, environment configs, or region-specific settings.

üß™ Example
variable "tags" {
  type        = map(string)
  default     = {
    environment = "dev"
    owner       = "kashish"
  }
}

==========================================================================

üå± Environment Variables in Terraform


Environment variables are used to pass configuration values into Terraform without hardcoding them. They follow the naming pattern TF_VAR_<variable_name> and are automatically mapped to input variables. This method is useful for automation, CI/CD pipelines, and keeping sensitive data (like credentials) out of source files.
Example:
bash:

export TF_VAR_aws_instance_type = "t3.micro"

powershell : $env:TF_VAR_aws_instance_type = "t3.micro"


===================================================================

üìÑ terraform.tfvars in Terraform
terraform.tfvars is a special file used to assign values to input variables in a Terraform configuration. It allows you to separate variable definitions from your main .tf files, making your code cleaner and easier to manage across environments. Terraform automatically loads this file when you run commands like terraform plan or terraform apply.


You can also use custom .tfvars files and load them manually with -var-file.

====================================================================


‚öôÔ∏è auto.tfvars in Terraform


auto.tfvars is a special file that Terraform automatically loads without needing to specify it manually. It‚Äôs used to assign values to input variables, just like terraform.tfvars, but with the added benefit of auto-loading based on its filename. You can also use multiple files like dev.auto.tfvars, prod.auto.tfvars, etc., to manage environment-specific configurations.

Example:
region        = "us-west-2"
instance_type = "t3.medium"


Terraform loads all *.auto.tfvars files in the working directory during plan and apply.

==============================================================

+-----------------------------+
| 1. CLI flags (-var)        |
+-----------------------------+
            ‚Üì
+-----------------------------+
| 2. Environment variables    |
|    (TF_VAR_name)           |
+-----------------------------+
            ‚Üì
+-----------------------------+
| 3. terraform.tfvars file   |
+-----------------------------+
            ‚Üì
+-----------------------------+
| 4. *.auto.tfvars files     |
+-----------------------------+
            ‚Üì
+-----------------------------+
| 5. -var-file (manual load) |
+-----------------------------+
            ‚Üì
+-----------------------------+
| 6. Default values in code  |
+-----------------------------+